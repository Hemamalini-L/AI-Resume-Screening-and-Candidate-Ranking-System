# -*- coding: utf-8 -*-
"""Copy of AI  powered Resume Screening and Ranking System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12mgXTrHzO6OYW0lz3rjsTaLN4CKnBoMJ
"""

import streamlit as st
from PyPDF2 import PdfReader
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity


!pip install streamlit

!pip install PyPDF2

def extract_text_from_pdf(file):
    pdf = PdfReader(file)
    text = ""
    for page in pdf.pages:
        text += page.extract_text()
    return text

import streamlit as st
from PyPDF2 import PdfReader
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer

file = st.file_uploader("Upload a PDF file", type=["pdf"])

# Check if a file has been uploaded
if file is not None:
    pdf = PdfReader(file)
    text = ""
    for page in pdf.pages:
        text += page.extract_text()
    # You can then process 'text' here
    # For example, display it:
    st.write(text)
else:
    st.write("Please upload a PDF file.") # Handle the case when no file is uploaded

# Function to rank resumes based on job description
def rank_resume(job_description, resumes):

  #Combine job description with resumes
  documents =[job_description]+ resumes
  vectorizer = TfidfVectorizer().fit_transform(documents)
  vectors = vectorizer.toarray()

  #Calculate cosine similarity
  job_description_vector = vectors[0].reshape(1, -1)
  resume_vectors = vectors[1:]
  cosine_similarities = cosine_similarity(job_description_vector, resume_vectors)

  return cosine_similarity

#Streamlit app
st.title("AI Resume Screening & Candidate Ranking System")
#Job description input
st.header("Job Description")
job_description = st.text_area("Enter the job description here:")

#File uploader
st.header ("Upload Resumes")
uploaded_files = st.file_uploader("Upload PDF files", type=["pdf"],accept_multiple_files=True)

if uploaded_files and job_description:
  st.header("Ranking Resumes")

  resume = []
  for file in uploaded_files:
    text = extract_text_from_pdf(file)
    resumes.append(text)

  #Rank resumes
  scores = rank_resumes(job_description,resumes)

  #Display scores
  results = pd.DataFrame({"Resume": [file.name for file in uploaded_files], "Scores":scores})
  results = results.sort_values(by="Score", ascending=False)
  st.write(results)
